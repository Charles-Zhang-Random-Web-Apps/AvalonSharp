@page "/"
@using Models
@inject IJSRuntime jsRuntime

<div>
    Group Size: <input placeholder="@groupSize" @onchange="@onChange" size="4" value="@groupSize" />
</div>

<div>
    @for (int i = 0; i < groupSize; i++)
    {
        Member member = members[i];
    <div>
        <button @onclick="() => member.IsGroupA = !member.IsGroupA" class="teamTypeButton" style="background-color: @(member.IsGroupA ? "White" : "Black"); color: @(member.IsGroupA ? "Black" : "White");">@(member.IsGroupA ? "Good" : "Bad")</button>
        @if (!isMobile) {<span>Member @(i + 1): </span>}<input placeholder="@member.Name " size="@(isMobile ? 5 : 12)" @bind="@member.Name" style="margin-right: 0.4rem"/>
        @if (currentTeam == null || currentTeam.Leader != member)
        {
            <button @onclick="() => StartTeam(member)">@(isMobile ? "Lead" : "Start Team")</button>
        }
        @if (currentTeam != null
          && !currentTeam.Candidates.Contains(member) && currentTeam.Leader != member
          && !currentTeam.Votes.Any(v => v.Key == member))
        {
            <button @onclick="() => JoinTeam(member)">@(isMobile ? "Join" : "Join Team")</button>
        }
        @if (currentTeam != null
         && !currentTeam.Candidates.Contains(member) && currentTeam.Leader != member
         && !currentTeam.Votes.Any(v => v.Key == member))
        {
            <button @onclick="() => Vote(member, true)">@(isMobile ? "✔️" : "Vote In Favor")</button>
            <button @onclick="() => Vote(member, false)">@(isMobile ? "❌" : "Vote Against")</button>
        }
        @if(!isMobile)
        {
            <input placeholder="Add Additional Notes Here" @bind="@member.MemberNote" />
        }
    </div>
    }
</div>

@foreach (var team in teams)
{
<div class="teamBox">
    <div>
        <strong>@team.Leader.Name </strong> Tried to Create a Team With <strong>@string.Join(", ", team.Candidates.Select(m => m.Name))</strong>: 
        @if(team.Success == null) { <span>PENDING</span> }
        else { <span>@(team.Success.Value ? "Succeed" : "Failed")</span> }
    </div>
    <div>
        <span class="votingLabel">Voting</span>
        @foreach (var vote in team.Votes.OrderBy(v => v.Key.ID))
        {
    <span><strong>@vote.Key.Name</strong>@(vote.Value.InFavor ? "👍" : "👎")&nbsp;&nbsp;&nbsp;&nbsp;</span>
        }
    </div>
</div>
}

@if(currentTeam != null)
{
<div class="currentMissionBox">
    <h3>Current Mission</h3>
    <div>
        <button @onclick="() => FinalizeMission(0)">Success</button>
        @for (int i = 1; i <= currentTeam.Teammates.Count; i++)
        {
            int localVarForBinding = i;
            <button @onclick="() => FinalizeMission(localVarForBinding)">Fail with @(i)x👎</button>
        }
    </div>
</div>
}

@for (int i = 0; i < missions.Count; i++)
{
    var mission = missions[i];
<div class="pastMissionBox">
    <em>Mission @(i+1) (@(mission.Success ? "Success" : $"Fail with {mission.FailCount}x👎"))</em>
    <div>
        <strong>@string.Join(", ", mission.Members.Select(m => m.Name))</strong>
    </div>
</div>
}

<div style="margin: 1rem">
    <h3>Game Notes</h3>
    <textarea rows="6" cols="@(isMobile ? 20 : 50 )" @bind="personalNote" />
</div>

@code {
    private bool isMobile { get; set; }
    private string personalNote { get; set; }
    private int groupSize { get; set; } = 9;
    private Member[] members;
    private List<Team> teams = new List<Team>();
    private List<Mission> missions = new List<Mission>();
    private DotNetObjectReference<Index>? objRef;

    protected override void OnInitialized()
    {
        updateMemberData();
    }

    protected override async Task OnParametersSetAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await jsRuntime.InvokeVoidAsync("registerDotNetHelper", objRef);

        isMobile = await jsRuntime.InvokeAsync<bool>("isSmallFormFactor");
    }

    [JSInvokable]
    public void performScreenChange(bool smallFactor)
    {
        isMobile = smallFactor;
        StateHasChanged();
    }

    private void onChange(ChangeEventArgs args)
    {
        groupSize = int.Parse((string)args.Value);

        updateMemberData();
    }

    private void updateMemberData()
    {
        members = new Member[groupSize];
        for (int i = 0; i < groupSize; i++)
        {
            members[i] = new Member();
            members[i].ID = i + 1;
            members[i].Name = $"Member {i + 1}";
            members[i].IsGroupA = true;
        }
    }

    private Team currentTeam = null;
    private void StartTeam(Member leader)
    {
        currentTeam = new Team();
        currentTeam.Leader = leader;
        teams.Add(currentTeam);
    }

    private void JoinTeam(Member member)
    {
        currentTeam.Candidates.Add(member);
    }

    private void Vote(Member member, bool inFavor)
    {
        currentTeam.Votes.Add(member, new Vote(member, inFavor));
        if(currentTeam.Votes.Count == groupSize
            || currentTeam.Votes.Count == groupSize - 1 - currentTeam.Candidates.Count)
        {
            currentTeam.Success = currentTeam.Votes.Count(v => v.Value.InFavor) >
                currentTeam.Votes.Count(k => !k.Value.InFavor);
        }
    }

    private void FinalizeMission(int downVote)
    {
        missions.Add(new Mission(downVote, currentTeam.Teammates));
        currentTeam = null;
    }
}